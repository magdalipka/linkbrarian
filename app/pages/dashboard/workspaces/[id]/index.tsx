import { useRouter } from "next/router";
import React from "react";
import {
  ActionIcon,
  Container,
  Grid,
  Modal,
  Stack,
  Text,
  Title,
  Group,
  TextInput,
  Button,
  Flex,
  Image,
} from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import { useWorkspace } from "@/context/workspacesContext";
import { IconEdit, IconLink, IconShare, IconTrash, IconX } from "@tabler/icons-react";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { Database } from "@/common/autogenerated";
import { COLORS } from "@/common/colors";
import { profile } from "console";
import { useProfile } from "@/context/profileContext";

const WorkspaceView = () => {
  const router = useRouter();
  const workspace = useWorkspace();
  React.useEffect(() => {
    // @ts-ignore
    if (router.query.id) workspace.setWorkspaceId(router.query.id);
  }, [router]);
  const supabaseClient = useSupabaseClient<Database>();
  const profile = useProfile();

  const [opened, { open, close }] = useDisclosure(false);
  const [newMemberNick, setNewMemberNick] = React.useState("");
  const [workspaceName, setWorkspaceName] = React.useState("");

  // const [visibleBookmarks, setVisibleBookmarks] = React.useState([]);
  // React.useEffect(() => {
  //   if (workspace.state === "ok" && workspace.bookmarks) {
  //     // console.log({ visibleBookmarks: workspace.bookmarks });
  //     setVisibleBookmarks([...workspace.bookmarks.filter((x) => !x.parent_id)]);
  //   }
  // }, [workspace]);

  if (workspace.state === "loading") {
    return <div>loading...</div>;
  }

  return (
    <Container>
      <Container>
        <Grid p="md">
          <Title>{workspace.data?.name}</Title>
          <ActionIcon color="gray" aria-label="Edit" onClick={open}>
            <IconEdit />
          </ActionIcon>
        </Grid>
      </Container>
      <Stack>
        {!workspace.bookmarks?.length ? (
          <Text>No bookmarks here yet</Text>
        ) : (
          workspace.bookmarks?.map((bookmark) => (
            <Flex
              key={bookmark.id}
              sx={{
                justifyContent: "space-between",
                flexDirection: "row",
                borderRadius: "15px",
                backgroundColor: COLORS.purple + "11",
              }}
            >
              <Container>
                <a href={bookmark.url}>
                  <Title>{bookmark.name}</Title>
                  <Text>{bookmark.url}</Text>
                </a>
                <Flex gap="1em" p="lg">
                  <ActionIcon
                    variant="filled"
                    color="red"
                    aria-label="Delete"
                    onClick={async () => {
                      await supabaseClient
                        .from("bookmarks")
                        .delete()
                        .filter("id", "eq", bookmark.id);
                      workspace.refetch();
                    }}
                  >
                    <IconTrash />
                  </ActionIcon>
                  <ActionIcon
                    variant="filled"
                    color="blue"
                    aria-label="Copy link"
                    onClick={() => {
                      navigator.clipboard.writeText(bookmark.url);
                    }}
                  >
                    <IconLink />
                  </ActionIcon>
                </Flex>
              </Container>
              <Container>
                <Image
                  src={
                    bookmark.screenshot || "https://placehold.co/600x400?text=Placeholder"
                  }
                  fit="scale-down"
                  height={"300px"}
                />
              </Container>
            </Flex>
          ))
        )}
      </Stack>

      {/* Modal for workspace edit */}
      <Modal opened={opened} onClose={close}>
        <Container>
          <Flex
            sx={{
              gap: "1em",
            }}
          >
            <TextInput
              value={workspaceName || workspace.data?.name}
              placeholder="Workspace name"
              onChange={(event) => setWorkspaceName(event.currentTarget.value)}
            />
            <Button
              onClick={async () => {
                await supabaseClient
                  .from("workspaces")
                  .update({ name: workspaceName })
                  .filter("id", "eq", workspace.data?.id);
                profile.refetch();
              }}
            >
              Save
            </Button>
            <Button
              color="red"
              onClick={async () => {
                await supabaseClient
                  .from("workspaces")
                  .delete()
                  .filter("id", "eq", workspace.data?.id);
                profile.refetch();
                workspace.refetch();
              }}
            >
              DELETE WORKSPACE
            </Button>
          </Flex>
        </Container>
        <Container>
          <Title>Members</Title>
          <Stack>
            {workspace.members?.map((member) => (
              <Group key={member.id}>
                <Text>
                  {member.display_name} @{member?.nick}
                </Text>
                <ActionIcon
                  variant="filled"
                  color="red"
                  aria-label="Remove"
                  onClick={async () => {
                    await supabaseClient
                      .from("workspace_members")
                      .delete()
                      .filter("user_id", "eq", member.id)
                      .filter("workspace_id", "eq", workspace.data!.id);
                  }}
                >
                  <IconX />
                </ActionIcon>
              </Group>
            ))}
          </Stack>
        </Container>
        <Container>
          <Title>Invite members</Title>
          <Flex
            sx={{
              gap: "1em",
            }}
          >
            <TextInput
              value={newMemberNick}
              placeholder="Nick"
              onChange={(event) => setNewMemberNick(event.currentTarget.value)}
            />
            <Button
              onClick={async () => {
                const { data: newMemberData } = await supabaseClient
                  .from("users")
                  .select("id")
                  .filter("nick", "eq", newMemberNick);
                if (newMemberData?.[0]) {
                  await supabaseClient.from("workspace_members").insert({
                    workspace_id: workspace.data!.id,
                    user_id: newMemberData?.[0].id,
                    role: "guest",
                  } as any);
                }
              }}
            >
              Invite
            </Button>
          </Flex>
        </Container>
      </Modal>
    </Container>
  );
};

export default WorkspaceView;
